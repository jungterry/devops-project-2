Description: >
    Terry Jung / Udacity 2020
    DevOps High-availability Web App Deployment Project

    This template deploys launch configuration for application servers in order
    to deploy four servers, two located in each of the private subnets. It deploys
    an auto-scaling group using the launch configuration. It deploys load balancer
    in public subnets. It deploys security group for load balancer and application
    server.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceAMI:
        Description: Amazon Machine Image for an instance
        Type: String
        Default: ami-07a29e5e945228fa1

    InstanceType:
        Description: An instance type to use for the web app
        Type: String
        Default: t3.medium

Resources:

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: name
                  Value: !Sub ${EnvironmentName} Load Balancer Security Group

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to web server and SSH from bastion host
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: name
                  Value: !Sub ${EnvironmentName} Web Server Security Group

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash 
                    sudo apt-get update -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udagramwebapp-s3/udagram.zip
                    unzip -o udacity.zip
                    echo "It works! Udagram, Udacity!" > index.html
            ImageId: !Ref InstanceAMI
            IamInstanceProfile:
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-WEBAPP-INST-PRF
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '10'
                    DeleteOnTermination: true
                    VolumeType: "gp2"

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: 
                    !Sub "${EnvironmentName}-PRIVATE-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '6'
            DesiredCapacity: '4'
            TargetGroupARNs:
                - Ref: WebAppTargetGroup
            Tags:
                - Key: name
                  Value: !Sub ${EnvironmentName} Web App Auto Scaling Group
                  PropagateAtLaunch: true

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SN"
            SecurityGroups:
                - Ref: LBSecGroup
            Tags:
                - Key: name
                  Value: !Sub ${EnvironmentName} Web App Load Balancer

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                    Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP

    LBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

Outputs:

    PulbicURL:
        Description: Public URL of the Load Balancer
        Value: !Sub http://${WebAppLB.DNSName}
        Export:
            Name: !Sub ${EnvironmentName}-DNS-NAME
